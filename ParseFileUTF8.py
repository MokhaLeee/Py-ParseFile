# TPC CHANGELOG:
# W.I.P.

# 1.0:
# - Initial Release

import os, sys

INPUT_ENCODING = "utf-8"
OUTPUT_ENCODING = "utf-8"

def Parse(line):
	
	res = line.strip('\n')
	res = bytes(res,OUTPUT_ENCODING)
	res = res.replace(b'[X]',	b'\x00')
	res = res.replace(b'[NL]',	b'\x01')
	res = res.replace(b'[2NL]',	b'\x02')
	res = res.replace(b'[A]',	b'\x03')
	res = res.replace(b'[....]',	b'\x04')
	res = res.replace(b'[.....]',	b'\x05')
	res = res.replace(b'[......]',	b'\x06')
	res = res.replace(b'[.......]',	b'\x07')
	res = res.replace(b'[OpenFarLeft]',	b'\x08')
	res = res.replace(b'[OpenMidLeft]',	b'\x09')
	res = res.replace(b'[OpenLeft]',	b'\x0A')
	res = res.replace(b'[OpenRight]',	b'\x0B')
	res = res.replace(b'[OpenMidRight]',	b'\x0C')
	res = res.replace(b'[OpenFarRight]',	b'\x0D')
	res = res.replace(b'[OpenFarFarLeft]',	b'\x0E')
	res = res.replace(b'[OpenFarFarRight]',	b'\x0F')
	
	res = res.replace(b'[LoadFace]', b'\x10')
	res = res.replace(b'[ClearFace]', b'\x11')
	res = res.replace(b'[NormalPrint]', b'\x12')
	res = res.replace(b'[FastPrint]', b'\x13')
	res = res.replace(b'[CloseSpeechFast]', b'\x14')
	res = res.replace(b'[CloseSpeechSlow]', b'\x15')
	res = res.replace(b'[ToggleMouthMove]', b'\x16')
	res = res.replace(b'[ToggleSmile]', b'\x17')
	res = res.replace(b'[Yes]', b'\x18')
	res = res.replace(b'[No]', b'\x19')
	res = res.replace(b'[Buy/Sell]', b'\x1A')
	res = res.replace(b'[ShopContinue]', b'\x1B')
	res = res.replace(b'[SendToBack]', b'\x1C')
	res = res.replace(b'[FastPrint]', b'\x1D')
	res = res.replace(b'[.]', b'\x1F')
	
	res = res.replace(b'[LoadOverworldFaces]', b'\x04\x80')
	res = res.replace(b'[G]', b'\x05\x80')
	res = res.replace(b'[MoveFarLeft]', b'\x0A\x80')
	res = res.replace(b'[MoveMidLeft]', b'\x0B\x80')
	res = res.replace(b'[MoveLeft]', b'\x0C\x80')
	res = res.replace(b'[MoveRight]', b'\x0D\x80')
	res = res.replace(b'[MoveMidRight]', b'\x0E\x80')
	res = res.replace(b'[MoveFarRight]', b'\x0F\x80')
	
	res = res.replace(b'[MoveFarFarLeft]', b'\x10\x80')
	res = res.replace(b'[MoveFarFarRight]', b'\x11\x80')
	res = res.replace(b'[EnableBlinking]', b'\x16\x80')
	res = res.replace(b'[DelayBlinking]', b'\x18\x80')
	res = res.replace(b'[PauseBlinking]', b'\x19\x80')
	res = res.replace(b'[DisableBlinking]', b'\x1B\x80')
	res = res.replace(b'[OpenEyes]', b'\x1C\x80')
	res = res.replace(b'[CloseEyes]', b'\x1D\x80')
	res = res.replace(b'[HalfCloseEyes]', b'\x1E\x80')
	res = res.replace(b'[Wink]', b'\x1F\x80')
	
	res = res.replace(b'[Tact]', b'\x20\x80')
	res = res.replace(b'[ToggleRed]', b'\x21\x80')
	res = res.replace(b'[Item]', b'\x22\x80')
	res = res.replace(b'[SetName]', b'\x23\x80')
	res = res.replace(b'[ToggleColorInvert]', b'\x25\x80')
	
	res = res.replace(b'[0x1]', b'\x01')
	res = res.replace(b'[0x01]', b'\x01')
	res = res.replace(b'[0x2]', b'\x02')
	res = res.replace(b'[0x02]', b'\x02')
	res = res.replace(b'[0x3]', b'\x03')
	res = res.replace(b'[0x03]', b'\x03')
	res = res.replace(b'[0x4]', b'\x04')
	res = res.replace(b'[0x04]', b'\x04')
	res = res.replace(b'[0x5]', b'\x05')
	res = res.replace(b'[0x05]', b'\x05')
	res = res.replace(b'[0x6]', b'\x06')
	res = res.replace(b'[0x06]', b'\x06')
	res = res.replace(b'[0x7]', b'\x07')
	res = res.replace(b'[0x07]', b'\x07')
	res = res.replace(b'[0x8]', b'\x08')
	res = res.replace(b'[0x08]', b'\x08')
	res = res.replace(b'[0x9]', b'\x09')
	res = res.replace(b'[0x09]', b'\x09')
	res = res.replace(b'[0xA]', b'\x0A')
	res = res.replace(b'[0x0A]', b'\x0A')
	res = res.replace(b'[0xB]', b'\x0B')
	res = res.replace(b'[0x0B]', b'\x0B')
	res = res.replace(b'[0xC]', b'\x0C')
	res = res.replace(b'[0x0C]', b'\x0C')
	res = res.replace(b'[0xD]', b'\x0D')
	res = res.replace(b'[0x0D]', b'\x0D')
	res = res.replace(b'[0xE]', b'\x0E')
	res = res.replace(b'[0x0E]', b'\x0E')
	res = res.replace(b'[0xF]', b'\x0F')
	res = res.replace(b'[0x0F]', b'\x0F')
	return res


def main():
	import argparse
	argParse = argparse.ArgumentParser()
	argParse.add_argument('-i','--input', help = 'input .fetext file generated by text-process')
	argParse.add_argument('-o','--output', help = 'output .dmp file to \"#incbin\" by Event-Assembler')
	
	arguments = argParse.parse_args(sys.argv[1:])
	
	input_file = arguments.input
	output_file = arguments.output
	
	if not os.path.exists(input_file):
		sys.exit("`{}` doesn't exist".format(input_file))
	
	
	with open(input_file, 'r', encoding = INPUT_ENCODING) as fi:
		with open(output_file, 'wb') as fo:
			
			for line in fi.readlines():
				fo.write( Parse(line) )
				
				


if __name__ == '__main__':
	main()